/*
gp_mpcc_h2h_ego : A fast customized optimization solver.

Copyright (C) 2013-2023 EMBOTECH AG [info@embotech.com]. All rights reserved.


This software is intended for simulation and testing purposes only. 
Use of this software for any commercial purpose is prohibited.

This program is distributed in the hope that it will be useful.
EMBOTECH makes NO WARRANTIES with respect to the use of the software 
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. 

EMBOTECH shall not have any liability for any damage arising from the use
of the software.

This Agreement shall exclusively be governed by and interpreted in 
accordance with the laws of Switzerland, excluding its principles
of conflict of laws. The Courts of Zurich-City shall have exclusive 
jurisdiction in case of any dispute.

*/

/* Generated by FORCESPRO v6.2.0 on Saturday, June 17, 2023 at 10:23:14 AM */
#ifndef gp_mpcc_h2h_ego_H
#define gp_mpcc_h2h_ego_H

#ifndef SOLVER_STDIO_H
#define SOLVER_STDIO_H
#include <stdio.h>
#endif
#ifndef SOLVER_STRING_H
#define SOLVER_STRING_H
#include <string.h>
#endif


#ifndef SOLVER_STANDARD_TYPES
#define SOLVER_STANDARD_TYPES

typedef signed char solver_int8_signed;
typedef unsigned char solver_int8_unsigned;
typedef char solver_int8_default;
typedef signed short int solver_int16_signed;
typedef unsigned short int solver_int16_unsigned;
typedef short int solver_int16_default;
typedef signed int solver_int32_signed;
typedef unsigned int solver_int32_unsigned;
typedef int solver_int32_default;
typedef signed long long int solver_int64_signed;
typedef unsigned long long int solver_int64_unsigned;
typedef long long int solver_int64_default;

#endif


/* DATA TYPE ------------------------------------------------------------*/
typedef double gp_mpcc_h2h_ego_float;
typedef double gp_mpcc_h2h_ego_ldl_s_float;
typedef double gp_mpcc_h2h_ego_ldl_r_float;
typedef double gp_mpcc_h2h_ego_callback_float;

typedef double gp_mpcc_h2h_egointerface_float;

/* SOLVER SETTINGS ------------------------------------------------------*/

/* MISRA-C compliance */
#ifndef MISRA_C_gp_mpcc_h2h_ego
#define MISRA_C_gp_mpcc_h2h_ego (0)
#endif

/* restrict code */
#ifndef RESTRICT_CODE_gp_mpcc_h2h_ego
#define RESTRICT_CODE_gp_mpcc_h2h_ego (0)
#endif

/* print level */
#ifndef SET_PRINTLEVEL_gp_mpcc_h2h_ego
#define SET_PRINTLEVEL_gp_mpcc_h2h_ego    (0)
#endif

/* timing */
#ifndef SET_TIMING_gp_mpcc_h2h_ego
#define SET_TIMING_gp_mpcc_h2h_ego    (0)
#endif

/* Numeric Warnings */
/* #define PRINTNUMERICALWARNINGS */

/* maximum number of iterations  */
#define SET_MAXIT_gp_mpcc_h2h_ego			(400)	

/* scaling factor of line search (FTB rule) */
#define SET_FLS_SCALE_gp_mpcc_h2h_ego		(gp_mpcc_h2h_ego_float)(0.99)      

/* maximum number of supported elements in the filter */
#define MAX_FILTER_SIZE_gp_mpcc_h2h_ego	(400) 

/* whether callback return values should be checked */
#define EXTFUNC_RETURN_gp_mpcc_h2h_ego (0)

/* SOLVER RETURN CODES----------------------------------------------------------*/
/* solver has converged within desired accuracy */
#define OPTIMAL_gp_mpcc_h2h_ego      (1)

/* maximum number of iterations has been reached */
#define MAXITREACHED_gp_mpcc_h2h_ego (0)

/* solver has stopped due to a timeout */
#define TIMEOUT_gp_mpcc_h2h_ego   (2)

/* solver stopped externally */
#define EXIT_EXTERNAL_gp_mpcc_h2h_ego (3)

/* wrong number of inequalities error */
#define INVALID_NUM_INEQ_ERROR_gp_mpcc_h2h_ego  (-4)

/* factorization error */
#define FACTORIZATION_ERROR_gp_mpcc_h2h_ego   (-5)

/* NaN encountered in function evaluations */
#define BADFUNCEVAL_gp_mpcc_h2h_ego  (-6)

/* invalid value (<= -100) returned by external function */
#define INVALIDFUNCEXIT_gp_mpcc_h2h_ego (-200)

/* bad value returned by external function */
#define BADFUNCEXIT_gp_mpcc_h2h_ego(status) (status > -100? status - 200 : INVALIDFUNCEXIT_gp_mpcc_h2h_ego)

/* no progress in method possible */
#define NOPROGRESS_gp_mpcc_h2h_ego   (-7)

/* regularization error */
#define REGULARIZATION_ERROR_gp_mpcc_h2h_ego   (-9)

/* invalid values in parameters */
#define PARAM_VALUE_ERROR_gp_mpcc_h2h_ego   (-11)

/* too small timeout given */
#define INVALID_TIMEOUT_gp_mpcc_h2h_ego   (-12)

/* thread error */
#define THREAD_FAILURE_gp_mpcc_h2h_ego  (-98)

/* locking mechanism error */
#define LOCK_FAILURE_gp_mpcc_h2h_ego  (-99)

/* licensing error - solver not valid on this machine */
#define LICENSE_ERROR_gp_mpcc_h2h_ego  (-100)

/* Insufficient number of internal memory instances.
 * Increase codeoptions.max_num_mem. */
#define MEMORY_INVALID_gp_mpcc_h2h_ego (-101)
/* Number of threads larger than specified.
 * Increase codeoptions.nlp.max_num_threads. */
#define NUMTHREADS_INVALID_gp_mpcc_h2h_ego (-102)


/* INTEGRATORS RETURN CODE ------------*/
/* Integrator ran successfully */
#define INTEGRATOR_SUCCESS (11)
/* Number of steps set by user exceeds maximum number of steps allowed */
#define INTEGRATOR_MAXSTEPS_EXCEEDED (12)


/* MEMORY STRUCT --------------------------------------------------------*/
typedef struct gp_mpcc_h2h_ego_mem gp_mpcc_h2h_ego_mem;
#ifdef __cplusplus
extern "C" {
#endif
/* MEMORY STRUCT --------------------------------------------------------*/
extern gp_mpcc_h2h_ego_mem * gp_mpcc_h2h_ego_external_mem(void * mem_ptr, solver_int32_unsigned i_mem, size_t mem_size);
extern size_t gp_mpcc_h2h_ego_get_mem_size( void );
extern size_t gp_mpcc_h2h_ego_get_const_size( void );
#ifdef __cplusplus
}
#endif

/* PARAMETERS -----------------------------------------------------------*/
/* fill this with data before calling the solver! */
typedef struct
{
    /* vector of size 190 */
    gp_mpcc_h2h_ego_float x0[190];

    /* vector of size 14 */
    gp_mpcc_h2h_ego_float xinit[14];

    /* vector of size 610 */
    gp_mpcc_h2h_ego_float all_parameters[610];


} gp_mpcc_h2h_ego_params;


/* OUTPUTS --------------------------------------------------------------*/
/* the desired variables are put here by the solver */
typedef struct
{
    /* column vector of length 19 */
    gp_mpcc_h2h_ego_float x01[19];

    /* column vector of length 19 */
    gp_mpcc_h2h_ego_float x02[19];

    /* column vector of length 19 */
    gp_mpcc_h2h_ego_float x03[19];

    /* column vector of length 19 */
    gp_mpcc_h2h_ego_float x04[19];

    /* column vector of length 19 */
    gp_mpcc_h2h_ego_float x05[19];

    /* column vector of length 19 */
    gp_mpcc_h2h_ego_float x06[19];

    /* column vector of length 19 */
    gp_mpcc_h2h_ego_float x07[19];

    /* column vector of length 19 */
    gp_mpcc_h2h_ego_float x08[19];

    /* column vector of length 19 */
    gp_mpcc_h2h_ego_float x09[19];

    /* column vector of length 19 */
    gp_mpcc_h2h_ego_float x10[19];


} gp_mpcc_h2h_ego_output;


/* SOLVER INFO ----------------------------------------------------------*/
/* diagnostic data from last interior point step */
typedef struct
{
    /* scalar: iteration number */
    solver_int32_default it;

    /* scalar: number of iterations needed to optimality (branch-and-bound) */
    solver_int32_default it2opt;

    /* scalar: inf-norm of equality constraint residuals */
    gp_mpcc_h2h_ego_float res_eq;

    /* scalar: inf-norm of inequality constraint residuals */
    gp_mpcc_h2h_ego_float res_ineq;

    /* scalar: norm of stationarity condition */
    gp_mpcc_h2h_ego_float rsnorm;

    /* scalar: max of all complementarity violations */
    gp_mpcc_h2h_ego_float rcompnorm;

    /* scalar: primal objective */
    gp_mpcc_h2h_ego_float pobj;

    /* scalar: dual objective */
    gp_mpcc_h2h_ego_float dobj;

    /* scalar: duality gap := pobj - dobj */
    gp_mpcc_h2h_ego_float dgap;

    /* scalar: relative duality gap := |dgap / pobj | */
    gp_mpcc_h2h_ego_float rdgap;

    /* scalar: duality measure */
    gp_mpcc_h2h_ego_float mu;

    /* scalar: duality measure (after affine step) */
    gp_mpcc_h2h_ego_float mu_aff;

    /* scalar: centering parameter */
    gp_mpcc_h2h_ego_float sigma;

    /* scalar: number of backtracking line search steps (affine direction) */
    solver_int32_default lsit_aff;

    /* scalar: number of backtracking line search steps (combined direction) */
    solver_int32_default lsit_cc;

    /* scalar: step size (affine direction) */
    gp_mpcc_h2h_ego_float step_aff;

    /* scalar: step size (combined direction) */
    gp_mpcc_h2h_ego_float step_cc;

    /* scalar: total solve time */
    gp_mpcc_h2h_ego_float solvetime;

    /* scalar: time spent in function evaluations */
    gp_mpcc_h2h_ego_float fevalstime;

    /* column vector of length 8: solver ID of FORCESPRO solver */
    solver_int32_default solver_id[8];




} gp_mpcc_h2h_ego_info;







/* SOLVER FUNCTION DEFINITION -------------------------------------------*/
/* Time of Solver Generation: (UTC) Saturday, June 17, 2023 10:23:16 AM */
/* User License expires on: (UTC) Monday, August 7, 2023 10:00:00 PM (approx.) (at the time of code generation) */
/* Solver Static License expires on: (UTC) Monday, August 7, 2023 10:00:00 PM (approx.) */
/* Solver Id: 8cae8c58-4793-4fd6-94e9-afae035731bb */
/* Host Compiler Version: d76500f0 */
/* Target Compiler Version: 9b0352b4 */
/* examine exitflag before using the result! */
#ifdef __cplusplus
extern "C" {
#endif		

typedef solver_int32_default (*gp_mpcc_h2h_ego_extfunc)(gp_mpcc_h2h_ego_float* x, gp_mpcc_h2h_ego_float* y, gp_mpcc_h2h_ego_float* lambda, gp_mpcc_h2h_ego_float* params, gp_mpcc_h2h_ego_float* pobj, gp_mpcc_h2h_ego_float* g, gp_mpcc_h2h_ego_float* c, gp_mpcc_h2h_ego_float* Jeq, gp_mpcc_h2h_ego_float* h, gp_mpcc_h2h_ego_float* Jineq, gp_mpcc_h2h_ego_float* H, solver_int32_default stage, solver_int32_default iterations, solver_int32_default threadID);

extern solver_int32_default gp_mpcc_h2h_ego_solve(gp_mpcc_h2h_ego_params *params, gp_mpcc_h2h_ego_output *output, gp_mpcc_h2h_ego_info *info, gp_mpcc_h2h_ego_mem *mem, FILE *fs, gp_mpcc_h2h_ego_extfunc evalextfunctions_gp_mpcc_h2h_ego);





/* AD tool to FORCESPRO interface */
extern solver_int32_default gp_mpcc_h2h_ego_adtool2forces(gp_mpcc_h2h_ego_float *x,        /* primal vars                                         */
                                 gp_mpcc_h2h_ego_float *y,        /* eq. constraint multiplers                           */
                                 gp_mpcc_h2h_ego_float *l,        /* ineq. constraint multipliers                        */
                                 gp_mpcc_h2h_ego_float *p,        /* parameters                                          */
                                 gp_mpcc_h2h_ego_float *f,        /* objective function (scalar)                         */
                                 gp_mpcc_h2h_ego_float *nabla_f,  /* gradient of objective function                      */
                                 gp_mpcc_h2h_ego_float *c,        /* dynamics                                            */
                                 gp_mpcc_h2h_ego_float *nabla_c,  /* Jacobian of the dynamics (column major)             */
                                 gp_mpcc_h2h_ego_float *h,        /* inequality constraints                              */
                                 gp_mpcc_h2h_ego_float *nabla_h,  /* Jacobian of inequality constraints (column major)   */
                                 gp_mpcc_h2h_ego_float *hess,     /* Hessian (column major)                              */
                                 solver_int32_default stage,     /* stage number (0 indexed)                           */
								 solver_int32_default iteration, /* iteration number of solver                         */
								 solver_int32_default threadID   /* Id of caller thread                                */);






#ifdef __cplusplus
}
#endif

#endif
